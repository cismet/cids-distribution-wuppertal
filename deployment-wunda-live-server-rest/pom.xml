<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>de.cismet.cids.custom.wuppertal.distribution</groupId>
        <artifactId>wuppertal-distribution</artifactId>
        <version>23.03.7</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <!--
        Inherit groupId and version from parent
    -->
    <artifactId>deployment-wunda-live-server-rest</artifactId>
    <packaging>pom</packaging>
    
    <name>deployment-wunda-live-server-rest</name>
    <description>deployment artifact for cids-custom-wunda-live-server</description>
        
    <!--
        This dependency managment section is only necessary to resolve dependency 
        conflicts (detected by maven-enforcer or maven-dependency plugins) between
        cids-custom-wunda-live-server and cids-utils!        
    -->
    <dependencyManagement>
        <dependencies>            
        </dependencies>
    </dependencyManagement>
    
    <!--
        Dependencies of the deployment artifact. This is everything needed to 
        create a running instance of the service or client!
    -->
    <dependencies>
        <!--
            The cids-server-rest-legacy atrifact
        -->
        <dependency>
            <groupId>de.cismet.cids</groupId>
            <artifactId>cids-server-rest-legacy</artifactId>
        </dependency>
        <!--
            The actual custom project server artifact that is deployed and run
        -->
        <dependency>
            <groupId>de.cismet.cids.custom.wupp.server</groupId>
            <artifactId>cids-custom-server-wuppertal</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.axis</groupId>
                    <artifactId>axis-jaxrpc</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!--
            Add also slf4j-log4j12 binding (which is declared as OPTIONAL dependency
            in the custom projects and the sub projects) to be able to forward slf4j
            logs messages to log4j.
        -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <!--
                'runtime' or 'compile' does not really matter in artifacts of 
                 type 'pom' (nothing to compile!) but we specify it anyway.
            -->
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.graylog2</groupId>
            <artifactId>gelfj</artifactId>
            <scope>runtime</scope>
        </dependency>
        
        <!--START unmanaged dependencies-->
        <dependency>
            <groupId>org.glassfish.tyrus.bundles</groupId>
            <artifactId>websocket-ri-bundle</artifactId>
            <version>1.18</version>
        </dependency>
        <!--END unmanaged dependencies-->
        
        <!--START unmanaged runtime dependencies-->
        <dependency>
            <groupId>org.glassfish.grizzly</groupId>
            <artifactId>grizzly-http-server</artifactId>
            <version>2.3.35</version>
            <scope>runtime</scope>
        </dependency>
        <!--END unmanaged runtime dependencies-->
        
    <!-- BEGIN: Downstream Test Dependencies -->
        <dependency>
            <groupId>de.cismet.commons</groupId>
            <artifactId>cismet-commons</artifactId>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>de.cismet.cids</groupId>
            <artifactId>cids-server</artifactId>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>de.cismet.cids</groupId>
            <artifactId>cids-server-rest</artifactId>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>de.cismet.cids.navigator</groupId>
            <artifactId>cids-navigator</artifactId>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>de.cismet</groupId>
            <artifactId>json-patch</artifactId>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
        <!-- END: Downstream Test Dependencies -->
        
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>xmlunit</groupId>
            <artifactId>xmlunit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-api-mockito</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-module-junit4</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-xml</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>javax.xml.stream</groupId>
                    <artifactId>stax-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-xml-provider</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>javax.xml.stream</groupId>
                    <artifactId>stax-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!--
            Why oh, why, did you use testng?! :o(
            See http://mail-archives.apache.org/mod_mbox/maven-surefire-dev/200711.mbox/%3CPine.WNT.4.64.0711191635230.2484@sfeng02.rf.lan%3E
        
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>com.beust</groupId>
                    <artifactId>jcommander</artifactId>
                </exclusion>
            </exclusions>
        </dependency>-->
        <dependency>
            <groupId>com.tngtech.java</groupId>
            <artifactId>junit-dataprovider</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- END: TEST dependencies -->
    </dependencies>
    
    <build>
        <!--
            Unpack resources of test dependencies to be able to run also tests
            that cannot be run from a jar file, e.g. because resources are 
            loaded as java.io.File.
        -->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>resource-dependencies</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>unpack-dependencies</goal>
                        </goals>
                        <configuration>
                            <includeGroupIds>de.cismet</includeGroupIds>
                            <includeArtifactIds>cismet-commons,cids-server,cids-navigator</includeArtifactIds>
                            <outputDirectory>${project.build.testOutputDirectory}/</outputDirectory>
                            <encoding>${project.build.sourceEncoding}</encoding>
                            <classifier>tests</classifier>
                            <type>test-jar</type>
                            <includeScope>test</includeScope>
                            <failOnMissingClassifierArtifact>true</failOnMissingClassifierArtifact>
                            <excludes>**/log4j.properties,**/*.class</excludes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>     
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <dependenciesToScan>
                        <dependency>de.cismet.commons:cismet-commons</dependency>
                        <dependency>de.cismet.cids:cids-server</dependency>
                        <dependency>de.cismet.cids.navigator:cids-navigator</dependency>
                        <dependency>de.cismet.cids:cids-server-rest</dependency>
                        <dependency>de.cismet:json-patch</dependency>
                        <dependency>de.cismet.cids:cidsbean-json-patch</dependency> 
                    </dependenciesToScan>
                    <!--
                        These tests from cismap- and cismet-commons do not work from inside a JAR file!
                        Therefore, the required resources to run the external tests have been 
                        copied to the cids-navigator test/resources directory!
                    -->
                    <excludes>
                        <exclude>**/ClassPathInfoTest.java</exclude>
                        <exclude>**/ClassloadingHelperTest</exclude>
                        <!--
                            Unfortunately, the Mockito Stuff does not work from inside a jar!
                        -->
                        <exclude>**/CidsBeanTest</exclude>
                        <exclude>**/CidsBeanSerialisationTest</exclude>
                    </excludes>
                    <!--
                        Don't support mixing JUnit tests with TestNG tests in a single Surefire execution. :o(
                        Set junit='false' to disable testng to try running in junit tests in compatiblity mode.
                    -->
                    <properties>
                        <property>
                            <name>junit</name>
                            <value>false</value>
                        </property>
                    </properties>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
